// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler.go

// Package internal is a generated GoMock package.
package internal

import (
	model "main/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockactions is a mock of actions interface.
type Mockactions struct {
	ctrl     *gomock.Controller
	recorder *MockactionsMockRecorder
}

// MockactionsMockRecorder is the mock recorder for Mockactions.
type MockactionsMockRecorder struct {
	mock *Mockactions
}

// NewMockactions creates a new mock instance.
func NewMockactions(ctrl *gomock.Controller) *Mockactions {
	mock := &Mockactions{ctrl: ctrl}
	mock.recorder = &MockactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockactions) EXPECT() *MockactionsMockRecorder {
	return m.recorder
}

// PostBinaryTreeSum mocks base method.
func (m *Mockactions) PostBinaryTreeSum(tree *model.Tree) (*model.BinaryTreeSum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBinaryTreeSum", tree)
	ret0, _ := ret[0].(*model.BinaryTreeSum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBinaryTreeSum indicates an expected call of PostBinaryTreeSum.
func (mr *MockactionsMockRecorder) PostBinaryTreeSum(tree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBinaryTreeSum", reflect.TypeOf((*Mockactions)(nil).PostBinaryTreeSum), tree)
}
